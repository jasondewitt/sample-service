name: sample service build and deploy
# This workflow is triggered on pushes to the repository.
on:
  push:
    branches:
      - master


env:
  IMAGE_NAME: jasondewitt/sample-service
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-app:
    name: build-app
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
      - name: set up variables
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "DEPLOY_BUCKET=storycorps-elasticbeanstalk-deploy" >> $GITHUB_ENV
          echo "EB_APP_NAME=storycorps_archive" >> $GITHUB_ENV
          echo "ECR_REGION=us-west-2" >> $GITHUB_ENV
      - name: set version tag var
        run: |
          echo "VERSION_TAG=$(echo ${BRANCH}-${GITHUB_RUN_ID})" >> $GITHUB_ENV
      # - name: determine which envrionment to deploy
      #   run: |
      #     case $BRANCH in
      #       dockerfile)
      #         echo ::set-env name=EB_ENV_NAME::archive-staging
      #         ;;
      #       stage)
      #         echo ::set-env name=EB_ENV_NAME::archive-staging
      #         ;;
      #       trunk)
      #         echo ::set-env name=EB_ENV_NAME::archive-production
      #         ;;
      #       *)
      #         echo "could not match branch with envrionment"
      #         echo $BRANCH
      #         exit 1
      #         ;;
      #     esac



      - name: checkout repo
        uses: actions/checkout@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: build-output

      - name: save built container as artifact
        run: |
          mkdir -p image || exit 1
          docker save build-output > image/output_image.tar


      - uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: image/


      # - name: Push run_id tag to ECR
      #   id: ecr-tag
      #   uses: jwalton/gh-ecr-push@v1
      #   with:
      #     access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     region: ${ECR_REGION}
      #     local-image: storycorps
      #     image: $IMAGE_NAME:${VERSION_TAG}
      # - name: Push latest tag to ECR for stage branch
      #   id: ecr-latest-stage
      #   uses: jwalton/gh-ecr-push@v1
      #   if: env.BRANCH == 'stage'
      #   with:
      #     access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     region: ${ECR_REGION}
      #     local-image: storycorps
      #     image: $IMAGE_NAME:stage-latest
      # - name: Push latest tag to ECR for trunk branch
      #   id: ecr-latest-trunk
      #   uses: jwalton/gh-ecr-push@v1
      #   if: env.BRANCH == 'trunk'
      #   with:
      #     access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     region: ${ECR_REGION}
      #     local-image: storycorps
      #     image: $IMAGE_NAME:latest
      # - name: AWS cli install action
      #   uses: chrislennon/action-aws-cli@1.1
      # - name: create Dockerrun.aws.json from template
      #   run: sed "s/<tag>/$VERSION_TAG/" Dockerrun.aws.json.template > Dockerrun.aws.json
      # - name: create ElasticBeanstalk deploy zip
      #   run: zip -r deploy-${VERSION_TAG}.zip .ebextensions Dockerrun.aws.json
      # - name: copy deploy zip to S3
      #   run: aws s3 cp deploy-${VERSION_TAG}.zip s3://${DEPLOY_BUCKET}/
      # - name: create application version
      #   run: |
      #     aws elasticbeanstalk create-application-version --application-name ${EB_APP_NAME} \
      #     --version-label ${VERSION_TAG} \
      #     --source-bundle S3Bucket="storycorps-elasticbeanstalk-deploy",S3Key="deploy-${VERSION_TAG}.zip" \
      #     --region ${ECR_REGION}
      # - name: deploy version to staging
      #   run: |
      #     aws elasticbeanstalk update-environment --application-name ${EB_APP_NAME} \
      #     --environment-name ${EB_ENV_NAME} \
      #     --version-label ${VERSION_TAG} --region ${ECR_REGION}



